/**
 */
package com.fukuda.kyudai.system.provider;

import com.fukuda.kyudai.system.util.SystemAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SystemItemProviderAdapterFactory extends SystemAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.system} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected systemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.system}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new systemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected domainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new domainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.temperature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected temperatureItemProvider temperatureItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.temperature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtemperatureAdapter() {
		if (temperatureItemProvider == null) {
			temperatureItemProvider = new temperatureItemProvider(this);
		}

		return temperatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.local} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected localItemProvider localItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.local}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createlocalAdapter() {
		if (localItemProvider == null) {
			localItemProvider = new localItemProvider(this);
		}

		return localItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.dht11_temperature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected dht11_temperatureItemProvider dht11_temperatureItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.dht11_temperature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdht11_temperatureAdapter() {
		if (dht11_temperatureItemProvider == null) {
			dht11_temperatureItemProvider = new dht11_temperatureItemProvider(this);
		}

		return dht11_temperatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.amazon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected amazonItemProvider amazonItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.amazon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createamazonAdapter() {
		if (amazonItemProvider == null) {
			amazonItemProvider = new amazonItemProvider(this);
		}

		return amazonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.anonymization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected anonymizationItemProvider anonymizationItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.anonymization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createanonymizationAdapter() {
		if (anonymizationItemProvider == null) {
			anonymizationItemProvider = new anonymizationItemProvider(this);
		}

		return anonymizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.data_average} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected data_averageItemProvider data_averageItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.data_average}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdata_averageAdapter() {
		if (data_averageItemProvider == null) {
			data_averageItemProvider = new data_averageItemProvider(this);
		}

		return data_averageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.encryption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected encryptionItemProvider encryptionItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.encryption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createencryptionAdapter() {
		if (encryptionItemProvider == null) {
			encryptionItemProvider = new encryptionItemProvider(this);
		}

		return encryptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.data_deletion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected data_deletionItemProvider data_deletionItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.data_deletion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdata_deletionAdapter() {
		if (data_deletionItemProvider == null) {
			data_deletionItemProvider = new data_deletionItemProvider(this);
		}

		return data_deletionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.fukuda.kyudai.system.verification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected verificationItemProvider verificationItemProvider;

	/**
	 * This creates an adapter for a {@link com.fukuda.kyudai.system.verification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createverificationAdapter() {
		if (verificationItemProvider == null) {
			verificationItemProvider = new verificationItemProvider(this);
		}

		return verificationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemItemProvider != null)
			systemItemProvider.dispose();
		if (domainItemProvider != null)
			domainItemProvider.dispose();
		if (temperatureItemProvider != null)
			temperatureItemProvider.dispose();
		if (localItemProvider != null)
			localItemProvider.dispose();
		if (dht11_temperatureItemProvider != null)
			dht11_temperatureItemProvider.dispose();
		if (amazonItemProvider != null)
			amazonItemProvider.dispose();
		if (anonymizationItemProvider != null)
			anonymizationItemProvider.dispose();
		if (data_averageItemProvider != null)
			data_averageItemProvider.dispose();
		if (encryptionItemProvider != null)
			encryptionItemProvider.dispose();
		if (data_deletionItemProvider != null)
			data_deletionItemProvider.dispose();
		if (verificationItemProvider != null)
			verificationItemProvider.dispose();
	}

}
